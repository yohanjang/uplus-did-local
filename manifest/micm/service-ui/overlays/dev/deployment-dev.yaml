apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-ui-deployment
  labels:
    app: service-ui
spec:
  selector:
    matchLabels:
      app: service-ui
  # RollingUpdate 설정
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: service-ui
    spec:
      securityContext:
        # User 'default' : uid=1001(default) gid=0(root) groups=0(root)
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup : 1001
      # 'Pod Topology Spread Constraints'
      # Reference : https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: ScheduleAnyway   # DoNotSchedule
        labelSelector:
          matchLabels:
            app: service-ui
      # volumes:
      #   - name: etcacapy
      #     configMap:
      #       name: service-ui-file-configmap
      #       items:
      #         - key: logging.ini
      #           path: logging.ini
      containers:
        - name: service-ui-container
          image: lgu-did/service-ui
          imagePullPolicy: IfNotPresent
          # volumeMounts:
          #   - name: etcacapy
          #     mountPath: /etc/acapy

          ### startupProbe : 해당 Pod 내 컨테이너의 application 이 시작되었는지 확인
          ### startupProbe OK 전까지는 readinessProbe/livenessProbe 호출하지 않음
          startupProbe:
            httpGet:
              path: /
              port: svc-ui
            initialDelaySeconds: 10   # pod 최초 생성 후 대기시간 ( Defaults: 0 )
            periodSeconds: 3          # probe 호출 주기 ( Defaults: 10 )
            timeoutSeconds: 2         # probe 호출시 timeout ( Defaults: 1 )
            failureThreshold: 5       # probe 가 실패할 수 있는 횟수 ( Defaults: 3 )
          ### readinessProbe : 해당 Pod 가 traffic 을 받을 준비가 되어있는지 확인
          ### 진단에 실패하면 엔드포인트(Endpoint) 컨트롤러는 해당 Pod 의 IP 를 endpoint 에서 제거
          readinessProbe:
            httpGet:
              path: /
              port: svc-ui
            initialDelaySeconds: 10   # startupProbe.initialDelaySeconds 와 동일하게 적용
            periodSeconds: 30         # probe 호출 주기
            timeoutSeconds: 2         # probe 호출시 timeout
            failureThreshold: 5       # probe 가 실패할 수 있는 횟수 ( Defaults: 3 )
          ### livenessProbe : 해당 Pod 가 가동 중인지 (alive) 확인
          ### Probe 호출 실패 횟수가 failureThreshold 초과시 Pod Restart 
          livenessProbe:
            httpGet:
              path: /
              port: svc-ui
            initialDelaySeconds: 10   # startupProbe.initialDelaySeconds 와 동일하게 적용
            periodSeconds: 30         # probe 호출 주기
            timeoutSeconds: 2         # probe 호출시 timeout
            failureThreshold: 5       # probe 가 실패할 수 있는 횟수 ( Defaults: 3 )

          command:
          - /bin/bash
          - -c
          - |
            /usr/bin/run-httpd
          resources:
            limits:
              memory: "336Mi"
              cpu: "0.3"
            requests:
              memory: "336Mi"
              cpu: "0.3"
