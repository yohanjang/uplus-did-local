apiVersion: apps/v1
kind: Deployment
metadata:
  name: acapy-agency-deployment
  labels:
    app: acapy-agency
spec:
  selector:
    matchLabels:
      app: acapy-agency
  # RollingUpdate 설정
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: acapy-agency
    spec:
      securityContext:
        # User 'indy' : uid=1001(indy) gid=1001(indy) groups=1001(indy)
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup : 1001
      # 'Pod Topology Spread Constraints'
      # Reference : https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: ScheduleAnyway   # DoNotSchedule
        labelSelector:
          matchLabels:
            app: acapy-agency
      volumes:
        - name: etcacapy
          configMap:
            name: acapy-agency-file-configmap
            items:
              - key: logging.ini
                path: logging.ini

      ### terminationGracePeriodSeconds : pod 종료시 timeout
      ### lifecycle.preStop 보다 우선순위 높음 : 45초 설정 ( default : 30초 )
      terminationGracePeriodSeconds: 45
      containers:
        - name: acapy-agency-container
          image: lgu-did/acapy-agency
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: etcacapy
              mountPath: /etc/acapy

          ### startupProbe : 해당 Pod 내 컨테이너의 application 이 시작되었는지 확인
          ### startupProbe OK 전까지는 readinessProbe/livenessProbe 호출하지 않음
          startupProbe:
            httpGet:
              path: /status/ready
              port: admin-api
            initialDelaySeconds: 20   # pod 최초 생성 후 대기시간 ( Defaults: 0 )
            periodSeconds: 5          # probe 호출 주기 ( Defaults: 10 )
            timeoutSeconds: 3         # probe 호출시 timeout ( Defaults: 1 )
            failureThreshold: 5       # probe 가 실패할 수 있는 횟수 ( Defaults: 3 )
          ### readinessProbe : 해당 Pod 가 traffic 을 받을 준비가 되어있는지 확인
          ### 진단에 실패하면 엔드포인트(Endpoint) 컨트롤러는 해당 Pod 의 IP 를 endpoint 에서 제거
          readinessProbe:
            httpGet:
              path: /status/ready
              port: admin-api
            initialDelaySeconds: 20    # startupProbe.initialDelaySeconds 와 동일하게 적용
            periodSeconds: 30          # probe 호출 주기
            timeoutSeconds: 3          # probe 호출시 timeout
            failureThreshold: 5        # probe 가 실패할 수 있는 횟수 ( Defaults: 3 )
          ### livenessProbe : 해당 Pod 가 가동 중인지 (alive) 확인
          ### Probe 호출 실패 횟수가 failureThreshold 초과시 Pod Restart 
          livenessProbe:
            httpGet:
              path: /status/live
              port: admin-api
            initialDelaySeconds: 20   # startupProbe.initialDelaySeconds 와 동일하게 적용
            periodSeconds: 30         # probe 호출 주기
            timeoutSeconds: 3         # probe 호출시 timeout
            failureThreshold: 5       # probe 가 실패할 수 있는 횟수 ( Defaults: 3 )
          env:
            ### 개별 Env 의 ConfigMap 참조 ::: START

            # indy-node 에서 배포한 indy-node-genesis-configmap 의 pool_transactions_genesis 키의 value 주입
            - name: ACAPY_GENESIS_TRANSACTIONS
              valueFrom:
                configMapKeyRef:
                  name: indy-node-genesis-configmap
                  key: pool_transactions_genesis

            ### 개별 Env 의 ConfigMap 참조 ::: END

            ### 개별 Env 의 Secret 참조 ::: START

            # 개발환경 micm postgresql 전용 secret 에 정의된 value 주입
            - name: ACAPY_WALLET_STORAGE_CREDS
              valueFrom:
                secretKeyRef:
                  name: micm-dev-postgresql-secret
                  key: ACAPY_WALLET_STORAGE_CREDS

            # 개발환경 micm did 전용 secret 에 정의된 value 주입
            - name: ACAPY_ADMIN_API_KEY
              valueFrom:
                secretKeyRef:
                  name: micm-dev-did-secret
                  key: ACAPY_ADMIN_API_KEY
            - name: ACAPY_MULTITENANT_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: micm-dev-did-secret
                  key: ACAPY_MULTITENANT_JWT_SECRET
            - name: ACAPY_WALLET_SEED
              valueFrom:
                secretKeyRef:
                  name: micm-dev-did-secret
                  key: ACAPY_WALLET_SEED
            - name: ACAPY_WALLET_KEY
              valueFrom:
                secretKeyRef:
                  name: micm-dev-did-secret
                  key: ACAPY_WALLET_KEY

            ### 개별 Env 의 Secret 참조 ::: END
          envFrom:
            - configMapRef:
                name: acapy-agency-env-configmap
          command: ["aca-py"]
          args:
            - start
            - --admin
            - 0.0.0.0
            - "8080"
            - --inbound-transport
            - http
            - 0.0.0.0
            - "8000"
            - --outbound-transport
            - http
          resources:
            limits:
              memory: "512Mi"
              cpu: "0.5"
            requests:
              memory: "512Mi"
              cpu: "0.5"
